// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScreenHome Page rendered 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ScreenHome
    navigation={
      Object {
        "state": Object {
          "key": "id-1512512594799-2",
          "params": Object {
            "screen": "Screen Home",
            "user": "prize",
          },
          "routeName": "ScreenHome",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <TouchableHighlight
        activeOpacity={0.85}
        onPress={[Function]}
        underlayColor="black"
      >
        <Image
          source={1}
          style={
            Object {
              "flex": 1,
              "resizeMode": "contain",
            }
          }
        />
      </TouchableHighlight>,
      "style": Object {
        "alignItems": "center",
        "flex": 1,
        "flexDirection": "column",
        "justifyContent": "center",
        "padding": "0%",
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "activeOpacity": 0.85,
        "children": <Image
          source={1}
          style={
            Object {
              "flex": 1,
              "resizeMode": "contain",
            }
          }
        />,
        "onPress": [Function],
        "underlayColor": "black",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "source": 1,
          "style": Object {
            "flex": 1,
            "resizeMode": "contain",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <TouchableHighlight
          activeOpacity={0.85}
          onPress={[Function]}
          underlayColor="black"
        >
          <Image
            source={1}
            style={
              Object {
                "flex": 1,
                "resizeMode": "contain",
              }
            }
          />
        </TouchableHighlight>,
        "style": Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "center",
          "padding": "0%",
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeOpacity": 0.85,
          "children": <Image
            source={1}
            style={
              Object {
                "flex": 1,
                "resizeMode": "contain",
              }
            }
          />,
          "onPress": [Function],
          "underlayColor": "black",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "source": 1,
            "style": Object {
              "flex": 1,
              "resizeMode": "contain",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
